package com.MicroService.UserService.Service;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collector;
import java.util.stream.Collectors;

import org.apache.tomcat.util.json.JSONParser;
import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.RestTemplate;

import com.MicroService.UserService.Model.Technology;
import com.MicroService.UserService.Model.User;
import com.MicroService.UserService.Repo.UserRepo;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.exc.StreamReadException;
import com.fasterxml.jackson.databind.DatabindException;
import com.fasterxml.jackson.databind.ObjectMapper;

@Service
public class UserServiceImpl implements UserService{

	@Autowired
	UserRepo userRepo;
	
	@Autowired
	private RestTemplate restTemplate;
	
	
	private Logger logger = LoggerFactory.getLogger(UserService.class);;
	
	@Override
	public User saveUser(User user) {
		user.setUserId(UUID.randomUUID().toString());
		return userRepo.save(user);
	}

	@Override
	public List<User> getAllUsers() {
		List<User> userList =userRepo.findAll();
		System.out.println("User List="+userList.toString());
		User u = new User();
		ObjectMapper mapper = new ObjectMapper();
		JSONParser jsonObject = restTemplate.getForObject("http://localhost:8083/technology",JSONParser.class);
		List<Technology> technologyList1 = new ArrayList<>();
		System.out.println("jsonObject ="+jsonObject);
        System.out.println("jsonObject string="+jsonObject.toString());
        User user = mapper.readValue(jsonObject, User.class);
   
		/*
		 * for (int i = 0; i < userList.size(); i++) { for (int j = 0; j <
		 * technologyList.size(); j++) {
		 * 
		 * if (userList.get(i).getUserId().toString().equals(technologyList1.get(j).
		 * getUserId().toString())) { Technology tech = new Technology();
		 * tech.setId(technologyList.get(j).getId());
		 * tech.setTechnology(technologyList.get(j).getTechnology());
		 * tech.setUserId(technologyList.get(j).getUserId()); technologyList1.add(tech);
		 * u.setTechnology(technologyList1); }
		 * 
		 * // List<Technology> object = //
		 * restTemplate.getForObject("http://localhost:8083/technology/users/"+userList.
		 * get(i).getUserId()+"",ArrayList.class);
		 * 
		 * }
		 * 
		 * }
		 */
		userList.add(u);

		
		return userList;
	}

	@Override
	public User getUser(String userId) {

		User user = userRepo.findById(userId).orElseThrow();
		List<Technology> object = restTemplate.getForObject("http://localhost:8083/technology/users/"+userId+"",
				ArrayList.class);

		user.setTechnology(object);
		return userRepo.findById(userId).orElseThrow();
	}

}
